//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xrm.PluginDeployer.Entities
{
    /// <summary>
    /// Assembly that contains one or more plug-in types.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("pluginassembly")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xrm.PluginDeployer.DevTool.BackEndEarlyBind", "1.0")]
    public partial class PluginAssembly : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public PluginAssembly() : 
                base(EntityLogicalName)
        {
        }

        /// <summary/>
        public const string EntityLogicalName = "pluginassembly";
        
        /// <summary/>
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        /// <summary/>
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        
        /// <summary/>
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary/>
        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }


        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
        public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componentstate");
            }
        }

        /// <summary>
        /// Bytes of the assembly, in Base64 format.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("content")]
        public string Content
        {
            get
            {
                return this.GetAttributeValue<string>("content");
            }
            set
            {
                this.OnPropertyChanging("Content");
                this.SetAttributeValue("content", value);
                this.OnPropertyChanged("Content");
            }
        }

        /// <summary>
        /// Unique identifier of the user who created the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
        public Microsoft.Xrm.Sdk.EntityReference CreatedBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
            }
        }

        /// <summary>
        /// Date and time when the plug-in assembly was created.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
        public System.Nullable<System.DateTime> CreatedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
            }
        }

        /// <summary>
        /// Unique identifier of the delegate user who created the pluginassembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
        public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// Culture code for the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("culture")]
        public string Culture
        {
            get
            {
                return this.GetAttributeValue<string>("culture");
            }
            set
            {
                this.OnPropertyChanging("Culture");
                this.SetAttributeValue("culture", value);
                this.OnPropertyChanged("Culture");
            }
        }

        /// <summary>
        /// Customization Level.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("customizationlevel")]
        public System.Nullable<int> CustomizationLevel
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("customizationlevel");
            }
        }

        /// <summary>
        /// Description of the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
        public string Description
        {
            get
            {
                return this.GetAttributeValue<string>("description");
            }
            set
            {
                this.OnPropertyChanging("Description");
                this.SetAttributeValue("description", value);
                this.OnPropertyChanged("Description");
            }
        }

        /// <summary>
        /// Version in which the form is introduced.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
        public string IntroducedVersion
        {
            get
            {
                return this.GetAttributeValue<string>("introducedversion");
            }
            set
            {
                this.OnPropertyChanging("IntroducedVersion");
                this.SetAttributeValue("introducedversion", value);
                this.OnPropertyChanged("IntroducedVersion");
            }
        }

        /// <summary>
        /// Information that specifies whether this component can be customized.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
        public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
            }
            set
            {
                this.OnPropertyChanging("IsCustomizable");
                this.SetAttributeValue("iscustomizable", value);
                this.OnPropertyChanged("IsCustomizable");
            }
        }

        /// <summary>
        /// Information that specifies whether this component should be hidden.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ishidden")]
        public Microsoft.Xrm.Sdk.BooleanManagedProperty IsHidden
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("ishidden");
            }
            set
            {
                this.OnPropertyChanging("IsHidden");
                this.SetAttributeValue("ishidden", value);
                this.OnPropertyChanged("IsHidden");
            }
        }

        /// <summary>
        /// Information that specifies whether this component is managed.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
        public System.Nullable<bool> IsManaged
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
            }
        }
        /// <summary>
        /// IsManaged as Enum
        /// </summary>
        public System.Nullable<Xrm.PluginDeployer.Entities.PluginAssembly.OptionSet.IsComponentManaged> IsManagedAsEnum
        {
            get
            {
                if (!IsManaged.HasValue) return null;
                if (IsManaged.Value) return Xrm.PluginDeployer.Entities.PluginAssembly.OptionSet.IsComponentManaged.Managed;
                return Xrm.PluginDeployer.Entities.PluginAssembly.OptionSet.IsComponentManaged.Unmanaged;
            }
            set
            {
                if (!value.HasValue) this.SetAttributeValue("ismanaged", null);
                if (value.Value == Xrm.PluginDeployer.Entities.PluginAssembly.OptionSet.IsComponentManaged.Managed)
                {
                    this.SetAttributeValue("ismanaged", true);
                }
                else
                {
                    this.SetAttributeValue("ismanaged", false);
                }
            }
        }

        /// <summary>
        /// Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isolationmode")]
        public Microsoft.Xrm.Sdk.OptionSetValue IsolationMode
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("isolationmode");
            }
            set
            {
                this.OnPropertyChanging("IsolationMode");
                this.SetAttributeValue("isolationmode", value);
                this.OnPropertyChanged("IsolationMode");
            }
        }

        /// <summary>
        /// Major of the assembly version.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("major")]
        public System.Nullable<int> Major
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("major");
            }
        }

        /// <summary>
        /// Minor of the assembly version.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("minor")]
        public System.Nullable<int> Minor
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("minor");
            }
        }

        /// <summary>
        /// Unique identifier of the user who last modified the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// Date and time when the plug-in assembly was last modified.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
        public System.Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
            }
        }

        /// <summary>
        /// Unique identifier of the delegate user who last modified the pluginassembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// Name of the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
        public string Name
        {
            get
            {
                return this.GetAttributeValue<string>("name");
            }
            set
            {
                this.OnPropertyChanging("Name");
                this.SetAttributeValue("name", value);
                this.OnPropertyChanged("Name");
            }
        }

        /// <summary>
        /// Unique identifier of the organization with which the plug-in assembly is associated.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
        public Microsoft.Xrm.Sdk.EntityReference OrganizationId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
        public System.Nullable<System.DateTime> OverwriteTime
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
            }
        }

        /// <summary>
        /// File name of the plug-in assembly. Used when the source type is set to 1.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("path")]
        public string Path
        {
            get
            {
                return this.GetAttributeValue<string>("path");
            }
            set
            {
                this.OnPropertyChanging("Path");
                this.SetAttributeValue("path", value);
                this.OnPropertyChanged("Path");
            }
        }

        /// <summary>
        /// Unique identifier of the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyid")]
        public System.Nullable<System.Guid> PluginAssemblyId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("pluginassemblyid");
            }
            set
            {
                this.OnPropertyChanging("PluginAssemblyId");
                this.SetAttributeValue("pluginassemblyid", value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }
                this.OnPropertyChanged("PluginAssemblyId");
            }
        }

        /// <summary/>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyid")]
        public override System.Guid Id
        {
            get
            {
                return base.Id;
            }
            set
            {
                this.PluginAssemblyId = value;
            }
        }

        /// <summary>
        /// Unique identifier of the plug-in assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("pluginassemblyidunique")]
        public System.Nullable<System.Guid> PluginAssemblyIdUnique
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("pluginassemblyidunique");
            }
        }

        /// <summary>
        /// Public key token of the assembly. This value can be obtained from the assembly by using reflection.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("publickeytoken")]
        public string PublicKeyToken
        {
            get
            {
                return this.GetAttributeValue<string>("publickeytoken");
            }
            set
            {
                this.OnPropertyChanging("PublicKeyToken");
                this.SetAttributeValue("publickeytoken", value);
                this.OnPropertyChanged("PublicKeyToken");
            }
        }

        /// <summary>
        /// Unique identifier of the associated solution.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
        public System.Nullable<System.Guid> SolutionId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
            }
        }

        /// <summary>
        /// Hash of the source of the assembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sourcehash")]
        public string SourceHash
        {
            get
            {
                return this.GetAttributeValue<string>("sourcehash");
            }
            set
            {
                this.OnPropertyChanging("SourceHash");
                this.SetAttributeValue("sourcehash", value);
                this.OnPropertyChanged("SourceHash");
            }
        }

        /// <summary>
        /// Location of the assembly, for example 0=database, 1=on-disk.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sourcetype")]
        public Microsoft.Xrm.Sdk.OptionSetValue SourceType
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("sourcetype");
            }
            set
            {
                this.OnPropertyChanging("SourceType");
                this.SetAttributeValue("sourcetype", value);
                this.OnPropertyChanged("SourceType");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("supportingsolutionid")]
        public System.Nullable<System.Guid> SupportingSolutionId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("supportingsolutionid");
            }
        }

        /// <summary>
        /// Version number of the assembly. The value can be obtained from the assembly through reflection.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("version")]
        public string Version
        {
            get
            {
                return this.GetAttributeValue<string>("version");
            }
            set
            {
                this.OnPropertyChanging("Version");
                this.SetAttributeValue("version", value);
                this.OnPropertyChanged("Version");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
        public System.Nullable<long> VersionNumber
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
            }
        }

        /// <summary/>
        public class OptionSet
        {

            /// <summary/>
            public enum SourceType
            {

                /// <summary/>
                Database = 0,

                /// <summary/>
                Disk = 1,

                /// <summary/>
                Normal = 2,
            }

            /// <summary/>
            public enum IsComponentManaged
            {

                /// <summary/>
                Unmanaged = 0,

                /// <summary/>
                Managed = 1,
            }

            /// <summary/>
            public enum ComponentState
            {

                /// <summary/>
                Published = 0,

                /// <summary/>
                Unpublished = 1,

                /// <summary/>
                Deleted = 2,

                /// <summary/>
                DeletedUnpublished = 3,
            }

            /// <summary/>
            public enum IsolationMode
            {

                /// <summary/>
                None = 1,

                /// <summary/>
                Sandbox = 2,
            }

        }

        /// <summary/>
        public class PropertyNames
        {

            /// <summary/>
            public const string ComponentState = "componentstate";

            /// <summary/>
            public const string ComponentStateName = "componentstatename";

            /// <summary/>
            public const string Content = "content";

            /// <summary/>
            public const string CreatedBy = "createdby";

            /// <summary/>
            public const string CreatedByName = "createdbyname";

            /// <summary/>
            public const string CreatedOn = "createdon";

            /// <summary/>
            public const string CreatedOnBehalfBy = "createdonbehalfby";

            /// <summary/>
            public const string CreatedOnBehalfByName = "createdonbehalfbyname";

            /// <summary/>
            public const string Culture = "culture";

            /// <summary/>
            public const string CustomizationLevel = "customizationlevel";

            /// <summary/>
            public const string Description = "description";

            /// <summary/>
            public const string IntroducedVersion = "introducedversion";

            /// <summary/>
            public const string IsCustomizable = "iscustomizable";

            /// <summary/>
            public const string IsHidden = "ishidden";

            /// <summary/>
            public const string IsManaged = "ismanaged";

            /// <summary/>
            public const string IsManagedName = "ismanagedname";

            /// <summary/>
            public const string IsolationMode = "isolationmode";

            /// <summary/>
            public const string IsolationModeName = "isolationmodename";

            /// <summary/>
            public const string Major = "major";

            /// <summary/>
            public const string Minor = "minor";

            /// <summary/>
            public const string ModifiedBy = "modifiedby";

            /// <summary/>
            public const string ModifiedByName = "modifiedbyname";

            /// <summary/>
            public const string ModifiedOn = "modifiedon";

            /// <summary/>
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";

            /// <summary/>
            public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";

            /// <summary/>
            public const string Name = "name";

            /// <summary/>
            public const string OrganizationId = "organizationid";

            /// <summary/>
            public const string OrganizationIdName = "organizationidname";

            /// <summary/>
            public const string OverwriteTime = "overwritetime";

            /// <summary/>
            public const string Path = "path";

            /// <summary/>
            public const string PluginAssemblyId = "pluginassemblyid";

            /// <summary/>
            public const string PluginAssemblyIdUnique = "pluginassemblyidunique";

            /// <summary/>
            public const string PublicKeyToken = "publickeytoken";

            /// <summary/>
            public const string SolutionId = "solutionid";

            /// <summary/>
            public const string SourceHash = "sourcehash";

            /// <summary/>
            public const string SourceType = "sourcetype";

            /// <summary/>
            public const string SourceTypeName = "sourcetypename";

            /// <summary/>
            public const string SupportingSolutionId = "supportingsolutionid";

            /// <summary/>
            public const string Version = "version";

            /// <summary/>
            public const string VersionNumber = "versionnumber";

        }

        /// <summary/>
        public class Ref
        {
        }
    }

    /// <summary>
    /// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
    /// </summary>
    public partial class CrmContext : Microsoft.Xrm.Sdk.Client.OrganizationServiceContext
    {

        /// <summary>
        /// Gets a binding to the set of all <see cref="Xrm.PluginDeployer.Entities.PluginAssembly"/> entities.
        /// </summary>
        public System.Linq.IQueryable<Xrm.PluginDeployer.Entities.PluginAssembly> PluginAssemblySet
        {
            get
            {
                return this.CreateQuery<Xrm.PluginDeployer.Entities.PluginAssembly>();
            }
        }
    }
}
